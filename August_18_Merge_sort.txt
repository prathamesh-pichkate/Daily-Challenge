TC : O(nlogn)
SC : O(n)

import java.util.*;
class MergeSort {

    // Merge two sorted halves into a single sorted subarray
    private static void merge(int[] arr, int low, int mid, int high) {
        List<Integer> temp = new ArrayList<>(); 
        int left = low;      
        int right = mid + 1; 

        // Merge elements from both halves in sorted order
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left++]);
            } else {
                temp.add(arr[right++]);
            }
        }

        // Copy remaining elements from left half
        while (left <= mid) {
            temp.add(arr[left++]);
        }

        // Copy remaining elements from right half
        while (right <= high) {
            temp.add(arr[right++]);
        }

        // Copy back sorted elements into original array
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    // Recursive Merge Sort function
    public static void mergeSort(int[] arr, int low, int high) {
        if (low >= high) return;  // Base case: one element

        int mid = low + (high - low) / 2; // Prevents overflow
        mergeSort(arr, low, mid);         // Sort left half
        mergeSort(arr, mid + 1, high);    // Sort right half
        merge(arr, low, mid, high);       // Merge the two halves
    }
}

public class Main {
    public static void main(String[] args) {
        int[] arr = { 9, 4, 7, 6, 3, 1, 5 };
        int n = arr.length;

        System.out.println("Before sorting:");
        System.out.println(Arrays.toString(arr));

        MergeSort.mergeSort(arr, 0, n - 1);

        System.out.println("After sorting:");
        System.out.println(Arrays.toString(arr));
    }
}
